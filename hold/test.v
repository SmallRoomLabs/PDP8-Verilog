/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module Demux3
(
    output [0:0] out_0,
    output [0:0] out_1,
    output [0:0] out_2,
    output [0:0] out_3,
    output [0:0] out_4,
    output [0:0] out_5,
    output [0:0] out_6,
    output [0:0] out_7,
    input [2:0] sel,
    input [0:0] in
);
    assign out_0 = (sel == 3'h0)? in : 1'h0;
    assign out_1 = (sel == 3'h1)? in : 1'h0;
    assign out_2 = (sel == 3'h2)? in : 1'h0;
    assign out_3 = (sel == 3'h3)? in : 1'h0;
    assign out_4 = (sel == 3'h4)? in : 1'h0;
    assign out_5 = (sel == 3'h5)? in : 1'h0;
    assign out_6 = (sel == 3'h6)? in : 1'h0;
    assign out_7 = (sel == 3'h7)? in : 1'h0;
endmodule


module test (
  input [11:0] BUS_IR,
  input OPR,
  output OPR1,
  output OPR2,
  output OPR3,
  output IAC,
  output X2,
  output LEFT,
  output RIGHT,
  output CML,
  output CMA,
  output CLL,
  output CLA1,
  output NA1,
  output HLT,
  output OSR,
  output TSTINV,
  output SNLSZL,
  output SZASNA,
  output SMASPA,
  output CLA2,
  output MQL,
  output SWP,
  output MQA,
  output SCA,
  output CLA_3,
  output LSR,
  output ASL,
  output SHL,
  output NMI,
  output DVI,
  output MUY,
  output SCL,
  output NOP0,
  output NOP
);
  wire s0;
  wire OPR1_temp;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire OPR2_temp;
  wire OPR3_temp;
  wire s8;
  wire MQL_temp;
  wire MQA_temp;
  wire s9;
  wire const1b0;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire [2:0] s14;
  assign const1b0 = 1'b0;
  assign s10 = ~ const1b0;
  assign s11 = ~ const1b0;
  assign s12 = ~ const1b0;
  assign s13 = ~ const1b0;
  assign s0 = BUS_IR[0];
  assign s1 = BUS_IR[1];
  assign s2 = BUS_IR[2];
  assign s3 = BUS_IR[3];
  assign s4 = BUS_IR[4];
  assign s5 = BUS_IR[5];
  assign s6 = BUS_IR[6];
  assign s7 = BUS_IR[7];
  assign s9 = BUS_IR[8];
  assign NOP = (OPR & (~ (s0 | s1 | s2) & ~ (1'b0 | s3 | s4)) & (~ (1'b0 | s3 | s4) & ~ (s5 | s6 | s7)));
  assign OPR1_temp = (~ s9 & OPR);
  assign OPR2_temp = (~ s0 & s9 & OPR);
  assign OPR3_temp = (s9 & s0 & OPR);
  assign IAC = (s0 & OPR1_temp);
  assign X2 = (s1 & OPR1_temp);
  assign LEFT = (s2 & OPR1_temp);
  assign RIGHT = (s3 & OPR1_temp);
  assign CML = (s4 & OPR1_temp);
  assign CMA = (s5 & OPR1_temp);
  assign CLL = (s6 & OPR1_temp);
  assign CLA1 = (s7 & OPR1_temp);
  assign NA1 = (s0 & OPR2_temp);
  assign HLT = (s1 & OPR2_temp);
  assign OSR = (s2 & OPR2_temp);
  assign TSTINV = (s3 & OPR2_temp);
  assign SNLSZL = (s4 & OPR2_temp);
  assign SZASNA = (s5 & OPR2_temp);
  assign SMASPA = (s6 & OPR2_temp);
  assign CLA2 = (s7 & OPR2_temp);
  assign s8 = (OPR3_temp & s0);
  assign MQL_temp = (OPR3_temp & s4);
  assign SCA = (OPR3_temp & s5);
  assign MQA_temp = (OPR3_temp & s6);
  assign CLA_3 = (OPR3_temp & s7);
  assign s14[0] = (OPR3_temp & s1);
  assign s14[1] = (OPR3_temp & s2);
  assign s14[2] = (OPR3_temp & s3);
  assign SWP = (MQL_temp & MQA_temp);
  Demux3 Demux3_i0 (
    .sel( s14 ),
    .in( 1'b1 ),
    .out_0( NOP0 ),
    .out_1( SCL ),
    .out_2( MUY ),
    .out_3( DVI ),
    .out_4( NMI ),
    .out_5( SHL ),
    .out_6( ASL ),
    .out_7( LSR )
  );
  assign OPR1 = OPR1_temp;
  assign OPR2 = OPR2_temp;
  assign OPR3 = OPR3_temp;
  assign MQL = MQL_temp;
  assign MQA = MQA_temp;
endmodule
